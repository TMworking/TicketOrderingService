services:
  ticket-purchase-service:
    build: ./TicketPurchaseService
    container_name: ticket-purchase-service
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_TTL: ${REDIS_TTL}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  postgres:
    container_name: postgres
    image: postgres:17
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  ticket-analytics-service:
    build: ./TicketAnalyticsService
    container_name: ticket-analytics-service
    ports:
      - "8081:8081"
    depends_on:
      postgres-kafka:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres-kafka
      POSTGRES_USERNAME: ${POSTGRES_KAFKA_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_KAFKA_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_KAFKA_DATABASE}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  postgres-kafka:
    container_name: postgres-kafka
    image: postgres:17
    restart: always
    ports:
      - "${POSTGRES_KAFKA_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_KAFKA_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_KAFKA_PASSWORD}
      POSTGRES_DB: ${POSTGRES_KAFKA_DATABASE}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_kafka_data:/var/lib/postgresql/data


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  postgres_kafka_data:
  redis_data: